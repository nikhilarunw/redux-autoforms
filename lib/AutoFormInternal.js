'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reduxFormV = require('redux-form-v5');

var _MetadataEvaluator = require('./metadata/evaluator/MetadataEvaluator');

var _MetadataEvaluator2 = _interopRequireDefault(_MetadataEvaluator);

var _ModelParser = require('./metadata/model/ModelParser');

var _ModelParser2 = _interopRequireDefault(_ModelParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import UIManager from './UIManager';

var AutoFormInternal = function (_Component) {
  _inherits(AutoFormInternal, _Component);

  function AutoFormInternal() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AutoFormInternal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AutoFormInternal.__proto__ || Object.getPrototypeOf(AutoFormInternal)).call.apply(_ref, [this].concat(args))), _this), _this.buildGroupComponent = function () {
      //Fields: this is not the fields passed from AutoForm. This is generated by ReduxForm. 
      //This object has a property for each field. Each property contains all redux props for the given field
      var _this$props = _this.props,
          fields = _this$props.fields,
          fieldMetadata = _this$props.fieldMetadata,
          layout = _this$props.layout,
          values = _this$props.values;


      var modelProcessed = _ModelParser2.default.process(values, fieldMetadata);
      var fieldMetadataEvaluated = _MetadataEvaluator2.default.evaluate(fieldMetadata, modelProcessed, '', fields);
      var componentFactory = _this.getFactory();

      return componentFactory.buildGroupComponent({
        component: layout.component,
        layout: layout,
        fields: fieldMetadataEvaluated,
        componentFactory: componentFactory
      });
    }, _this.getSubErrors = function (fields) {
      var arr = fields.map(function (field) {
        var result = null;

        for (var key in field) {
          if (field.hasOwnProperty(key)) {
            if (field[key].error) {
              result = _extends({}, result, _defineProperty({}, field[key].name, field[key].error));
            }
          }
        }

        return result;
      });

      return arr.filter(function (field) {
        return field !== null ? true : false;
      });
    }, _this.getErrors = function (fields) {
      var arr = [];

      for (var key in fields) {
        if (fields.hasOwnProperty(key)) {
          if (Array.isArray(fields[key])) {
            var subArr = _this.getSubErrors(fields[key]);

            //Merge both arrays into one to get the values up to date
            arr = [].concat(_toConsumableArray(arr), _toConsumableArray(subArr));
          } else if (fields[key].error) {
            arr.push(_defineProperty({}, fields[key].name, fields[key].error));
          }
        }
      }

      return arr;
    }, _this.getButtonBar = function () {
      //Because redux-form always force a re-render with different kinds of events,
      //we got the errors up to date in fields object
      var _this$props2 = _this.props,
          buttonBar = _this$props2.buttonBar,
          submitting = _this$props2.submitting,
          pristine = _this$props2.pristine,
          fields = _this$props2.fields;

      var errors = _this.getErrors(fields);

      var buttonBarProps = {
        submitting: submitting,
        pristine: pristine,
        errors: errors
      };

      return _react2.default.createElement(buttonBar, buttonBarProps);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AutoFormInternal, [{
    key: 'getFactory',


    //TODO JS: make this work
    value: function getFactory() {
      var _props = this.props,
          uiType = _props.uiType,
          componentFactory = _props.componentFactory;

      // if (!uiType) {
      //     return componentFactory;
      // }
      //
      // return UIManager.getFactoryPerType(uiType);

      return componentFactory;
    }
  }, {
    key: 'render',
    value: function render() {
      var groupComponent = this.buildGroupComponent();
      var componentFactory = this.getFactory();
      var buttonBar = this.getButtonBar();
      var Root = componentFactory.getRoot();

      return _react2.default.createElement(
        Root,
        this.props,
        groupComponent,
        buttonBar
      );
    }
  }]);

  return AutoFormInternal;
}(_react.Component);

AutoFormInternal.propTypes = {
  uiType: _propTypes2.default.string,
  fields: _propTypes2.default.object.isRequired,
  handleSubmit: _propTypes2.default.func.isRequired,
  resetForm: _propTypes2.default.func.isRequired,
  submitting: _propTypes2.default.bool.isRequired,
  pristine: _propTypes2.default.bool.isRequired,
  componentFactory: _propTypes2.default.object,
  entity: _propTypes2.default.object.isRequired,
  layout: _propTypes2.default.object,
  buttonBar: _propTypes2.default.func.isRequired,
  fieldLayout: _propTypes2.default.string
};
exports.default = (0, _reduxFormV.reduxForm)()(AutoFormInternal);
module.exports = exports['default'];